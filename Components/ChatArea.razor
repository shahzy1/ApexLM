@using MudBlazor

<div class="chat-area @(IsMobile ? "mobile-chat" : "desktop-chat")">
    <div class="chat-header">
        <MudText Typo="Typo.h6">Chat</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                     Size="Size.Small" 
                     Color="Color.Inherit"
                     OnClick="ClearChat" />
    </div>

    <!-- Chat Messages -->
    <div class="chat-messages" id="chat-messages">
        @if (messages.Any())
        {
            @foreach (var message in messages)
            {
                <div class="@($"message {(message.IsUser ? "user-message" : "ai-message")}")">
                    <div class="message-avatar">
                        @if (message.IsUser)
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Person" 
                                    Size="Size.Small" 
                                    Color="Color.Primary" />
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" 
                                    Size="Size.Small" 
                                    Color="Color.Secondary" />
                        }
                    </div>
                    <div class="message-content">
                        <MudText Typo="Typo.body1" Class="mb-1">@message.Content</MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">@message.Timestamp</MudText>
                    </div>
                </div>
            }
        }
        else
        {
            <!-- Welcome State -->
            <div class="welcome-state">
                <div class="welcome-icon">
                    <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" 
                            Size="Size.Large" 
                            Color="Color.Primary" />
                </div>
                <MudText Typo="Typo.h6" Class="mb-2 text-center">How can I help you today?</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4 text-center">
                    Ask questions about your sources, summarize content, or generate insights.
                </MudText>
                
                <!-- Quick Actions -->
                <div class="quick-actions">
                    <MudCard Class="quick-action-card" OnClick="@(() => QuickAction("Summarize the main themes"))">
    <MudCardContent Class="pa-3 text-center">
        <MudIcon Icon="@Icons.Material.Filled.Summarize" 
                Color="Color.Primary" 
                Class="mb-2" />
        <MudText Typo="Typo.caption">Summarize</MudText>
    </MudCardContent>
</MudCard>

<MudCard Class="quick-action-card" OnClick="@(() => QuickAction("Find key insights"))">
    <MudCardContent Class="pa-3 text-center">
        <MudIcon Icon="@Icons.Material.Filled.Insights" 
                Color="Color.Primary" 
                Class="mb-2" />
        <MudText Typo="Typo.caption">Key Insights</MudText>
    </MudCardContent>
</MudCard>

<MudCard Class="quick-action-card" OnClick="@(() => QuickAction("Suggest related topics"))">
    <MudCardContent Class="pa-3 text-center">
        <MudIcon Icon="@Icons.Material.Filled.AccountTree" 
                Color="Color.Primary" 
                Class="mb-2" />
        <MudText Typo="Typo.caption">Related Topics</MudText>
    </MudCardContent>
</MudCard>
                </div>
            </div>
        }
    </div>

    <!-- Chat Input -->
    <div class="chat-input">
        <MudTextField @bind-Value="newMessage" 
                     Variant="Variant.Outlined"
                     Placeholder="Ask about your sources..."
                     Adornment="Adornment.End"
                     AdornmentIcon="@Icons.Material.Filled.Send"
                     OnAdornmentClick="SendMessage"
                     Class="flex-grow-1"
                     Size="Size.Medium" />
    </div>
</div>

@code {
    [Parameter]
    public string NotebookId { get; set; } = string.Empty;

    [Parameter]
    public string? NotebookTitle { get; set; }

    [Parameter]
    public bool IsMobile { get; set; }

    private List<ChatMessage> messages = new();
    private string newMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Add welcome message
        messages.Add(new ChatMessage
        {
            Content = $"Hello! I'm ready to help you explore \"{NotebookTitle}\". You can ask me to summarize content, find connections between sources, or generate new insights based on your materials.",
            IsUser = false,
            Timestamp = DateTime.Now.ToString("HH:mm")
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollToBottom();
    }

    private async void SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage))
            return;

        var userMessage = newMessage;
        newMessage = string.Empty;
        
        // Add user message
        messages.Add(new ChatMessage
        {
            Content = userMessage,
            IsUser = true,
            Timestamp = DateTime.Now.ToString("HH:mm")
        });

        StateHasChanged();
        await ScrollToBottom();

        // Simulate AI response
        await Task.Delay(1000);
        
        messages.Add(new ChatMessage
        {
            Content = GetAIResponse(userMessage),
            IsUser = false,
            Timestamp = DateTime.Now.ToString("HH:mm")
        });

        StateHasChanged();
        await ScrollToBottom();
    }

    private void ClearChat()
    {
        messages.Clear();
        messages.Add(new ChatMessage
        {
            Content = $"Chat cleared. I'm ready to help you with \"{NotebookTitle}\".",
            IsUser = false,
            Timestamp = DateTime.Now.ToString("HH:mm")
        });
    }

    private void QuickAction(string action)
    {
        newMessage = action;
        SendMessage();
    }

    private async Task ScrollToBottom()
    {
        await InvokeAsync(() =>
        {
            var element = JS.InvokeAsync<object>("eval", 
                "var chat = document.getElementById('chat-messages'); if (chat) chat.scrollTop = chat.scrollHeight;");
        });
    }

    private string GetAIResponse(string userMessage)
    {
        // Simple AI response simulation
        if (userMessage.ToLower().Contains("summarize"))
        {
            return "Based on your 6 sources, here are the main themes I've identified... [This is a simulated response demonstrating the three-pane layout]";
        }
        else
        {
            return $"I've analyzed your query about '{userMessage}'. Looking across your {sources} sources, I can provide insights and connections. [This is a simulated response in the three-pane layout]";
        }
    }

    private int sources => 6; // Sample count

    public class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public string Timestamp { get; set; } = string.Empty;
    }

    [Inject] private IJSRuntime JS { get; set; } = null!;
}

<style>
    .chat-area {
        height: 100%;
        display: flex;
        flex-direction: column;
        background-color: var(--mud-palette-background);
    }

    .desktop-chat {
        padding: 16px;
    }

    .mobile-chat {
        padding: 12px;
    }

    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        flex-shrink: 0;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 8px 0;
        margin-bottom: 16px;
    }

    .message {
        display: flex;
        gap: 12px;
        margin-bottom: 20px;
        align-items: flex-start;
    }

    .user-message {
        flex-direction: row-reverse;
    }

    .message-avatar {
        flex-shrink: 0;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-color: var(--mud-palette-action-hover);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 4px;
    }

    .user-message .message-avatar {
        background-color: var(--mud-palette-primary);
    }

    .message-content {
        max-width: 70%;
        padding: 12px 16px;
        border-radius: 18px;
        background-color: var(--mud-palette-grey-light);
    }

    .user-message .message-content {
        background-color: var(--mud-palette-primary);
        color: var(--mud-palette-primary-text);
        border-bottom-right-radius: 4px;
    }

    .ai-message .message-content {
        border-bottom-left-radius: 4px;
    }

    .welcome-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        padding: 40px 20px;
    }

    .welcome-icon {
        margin-bottom: 16px;
    }

    .quick-actions {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 12px;
        max-width: 400px;
        width: 100%;
    }

    .quick-action-card {
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

    .quick-action-card:hover {
        background-color: var(--mud-palette-action-hover);
        transform: translateY(-2px);
    }

    .chat-input {
        flex-shrink: 0;
    }

    /* Scrollbar styling */
    .chat-messages::-webkit-scrollbar {
        width: 6px;
    }

    .chat-messages::-webkit-scrollbar-track {
        background: transparent;
    }

    .chat-messages::-webkit-scrollbar-thumb {
        background: var(--mud-palette-action-disabled);
        border-radius: 3px;
    }
</style>