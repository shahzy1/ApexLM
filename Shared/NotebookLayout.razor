@inherits LayoutComponentBase
@using ApexLM.Components
@using MudBlazor
@inject IJSRuntime JS


<MudThemeProvider Theme="@_currentTheme" IsDarkMode="@_isDarkMode" />

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout Class="h-screen bg-grey-light">
    <!-- ✅ Desktop AppBar -->
    <MudAppBar Elevation="1" Class="d-none d-md-flex">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
        <MudLink Href="/">
            <MudImage Src="/assets/logo_FM.png" Alt="Tanolis logo" Width="50" Height="30" Elevation="25" Class="rounded-lg" />
        </MudLink>
        <MudText Typo="Typo.h5" Color="Color.Info" Class="ml-1">ApexLM</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>

    <!-- ✅ Mobile AppBar -->
    <MudAppBar Elevation="0" Dense="true"
               Class="mud-appbar mud-appbar-dense d-flex align-center justify-between px-2 d-flex d-md-none">
        <MudText Typo="Typo.h6">ApexLM</MudText>
        <MudIconButton Icon="@(_isDarkMode? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="ToggleTheme"
                       Title="Toggle Light/Dark Mode" />
    </MudAppBar>


    <!-- ✅ Desktop Layout -->
    <MudContainer MaxWidth="MaxWidth.False" Class="d-none d-md-flex h-100 p-0" Style="margin-top: 50px;">
        <MudPaper Class="p-3 border-end" Style="width: 260px;">
            <SourcePanel />
        </MudPaper>

        <MudPaper Class="flex-grow-1 p-4 overflow-auto" Elevation="0">
            @Body
        </MudPaper>

        <MudPaper Class="p-3 border-start" Style="width: 320px;">
            <StudioPanel />
        </MudPaper>
    </MudContainer>

    <!-- ✅ Mobile Layout -->
    <MudContainer MaxWidth="MaxWidth.False" Class="d-flex d-md-none flex-column h-100 p-0">
        <MudPaper Class="flex-grow-1 p-3 overflow-auto" Elevation="0">
            @if (_activeTab == 0)
            {
                <SourcePanel />
            }
            else if (_activeTab == 1)
            {
                @Body
            }
            else if (_activeTab == 2)
            {
                <StudioPanel />
            }
        </MudPaper>

        <MudPaper Elevation="8" Class="border-top p-0" Style="position: sticky; bottom: 0;">
            <MudTabs @bind-ActivePanelIndex="_activeTab"
                     Centered="true"
                     Rounded="false"
                     Border="false"
                     DisableSlider="true"
                     Color="Color.Primary"
                     Variant="Variant.Text"
                     OnActivePanelIndexChanged="OnTabChanged">
                <MudTabPanel Text="Sources" Icon="@Icons.Material.Filled.Article" />
                <MudTabPanel Text="Chat" Icon="@Icons.Material.Filled.Chat" />
                <MudTabPanel Text="Studio" Icon="@Icons.Material.Filled.Dashboard" />
            </MudTabs>
        </MudPaper>

    </MudContainer>

</MudLayout>

@code {

    bool _drawerOpen = true;

    void DrawerToggle() => _drawerOpen = !_drawerOpen;

    private int _activeTab = 1;
    private bool _isDarkMode = false;

    private MudTheme _currentTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#4B6BFB", // Calm azure blue
            Secondary = "#F0F4FF",
            Background = "#F9FAFB",
            AppbarBackground = "#FFFFFF",
            TextPrimary = "#1A1A1A"
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#90CAF9",
            Secondary = "#2C2C2C",
            Background = "#1A1A1A",
            AppbarBackground = "#212121",
            TextPrimary = "#E0E0E0"
        }
    };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load saved tab
            var storedTab = await JS.InvokeAsync<string>("tabStorage.get", "activeNotebookTab");
            if (int.TryParse(storedTab, out var index))
                _activeTab = index;

            // Load saved theme
            var storedTheme = await JS.InvokeAsync<string>("themeStorage.get");
            if (storedTheme == "dark")
                _isDarkMode = true;

            StateHasChanged();
        }
    }

    private async Task OnTabChanged(int newIndex)
    {
        _activeTab = newIndex;
        await JS.InvokeVoidAsync("tabStorage.set", "activeNotebookTab", newIndex.ToString());
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        var theme = _isDarkMode ? "dark" : "light";
        await JS.InvokeVoidAsync("themeStorage.set", theme);
    }
}





