@page "/notebookdashboard"
@using Microsoft.AspNetCore.Authorization
@using T.ApexLM.App.Services
@using T.ApexLM.App.Shared
@using MudBlazor

@inject NavigationManager Navigation
@inject IFilterStorageService FilterStorage
@inject ILayoutService LayoutService
@inject IDialogService DialogService

@attribute [Authorize]

@layout MainLayout

<MudContainer MaxWidth="MaxWidth.Large" Class="py-16">
    <!-- Header with Enhanced Filter Buttons -->
    <div class="d-flex justify-space-between align-center mb-8">
        <div class="d-flex align-center gap-2">
            <!-- Enhanced Filter Buttons with Visual Indicators -->
            <div class="filter-group">
                <MudText Typo="Typo.subtitle2" Color="Color.Default" Class="mb-1 filter-label">
                    FILTER BY
                </MudText>
                <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary" Class="filter-buttons">
                    <MudButton OnClick="@(() => ChangeFilter(NotebookFilter.All))" 
                              Variant="@(currentFilter == NotebookFilter.All ? Variant.Filled : Variant.Outlined)"
                              Color="@(currentFilter == NotebookFilter.All ? Color.Primary : Color.Inherit)"
                              Size="Size.Small"
                              StartIcon="@(currentFilter == NotebookFilter.All ? Icons.Material.Filled.Check : Icons.Material.Filled.FilterList)"
                              Class="@($"filter-button {(currentFilter == NotebookFilter.All ? "filter-active" : "")}")">
                        All
                        @if (currentFilter == NotebookFilter.All)
                        {
                            <MudBadge Color="Color.Primary" Size="Size.Small" Class="ml-1">
                                @(featuredNotebooks.Count + recentNotebooks.Count)
                            </MudBadge>
                        }
                    </MudButton>
                    <MudButton OnClick="@(() => ChangeFilter(NotebookFilter.Featured))" 
                              Variant="@(currentFilter == NotebookFilter.Featured ? Variant.Filled : Variant.Outlined)"
                              Color="@(currentFilter == NotebookFilter.Featured ? Color.Primary : Color.Inherit)"
                              Size="Size.Small"
                              StartIcon="@(currentFilter == NotebookFilter.Featured ? Icons.Material.Filled.Star : Icons.Material.Outlined.Star)"
                              Class="@($"filter-button {(currentFilter == NotebookFilter.Featured ? "filter-active" : "")}")">
                        Featured
                        @if (currentFilter == NotebookFilter.Featured)
                        {
                            <MudBadge Color="Color.Primary" Size="Size.Small" Class="ml-1">
                                @featuredNotebooks.Count
                            </MudBadge>
                        }
                    </MudButton>
                </MudButtonGroup>
            </div>
        </div>
        
        <div class="d-flex align-center gap-2" style="align-items: flex-end;">
            <!-- Enhanced View Toggle with Clear Visual Indicators -->
            <div class="view-group">
                <MudText Typo="Typo.subtitle2" Color="Color.Default" Class="mb-1 view-label">
                    VIEW
                </MudText>
                <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary" Class="view-buttons">
                    <MudButton OnClick="@(() => ChangeView(LayoutView.Card))" 
                              Variant="@(currentView == LayoutView.Card ? Variant.Filled : Variant.Outlined)"
                              Color="@(currentView == LayoutView.Card ? Color.Primary : Color.Inherit)"
                              StartIcon="@Icons.Material.Filled.ViewModule"
                              Size="Size.Small"
                              Class="@($"view-button {(currentView == LayoutView.Card ? "view-active" : "view-inactive")}")"
                              Style="@(currentView == LayoutView.Card ? "border: 2px solid var(--mud-palette-primary);" : "")">
                        Card
                        @if (currentView == LayoutView.Card)
                        {
                            <MudBadge Color="Color.Primary" Size="Size.Small" Class="ml-1">
                                <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" />
                            </MudBadge>
                        }
                    </MudButton>
                    <MudButton OnClick="@(() => ChangeView(LayoutView.List))" 
                              Variant="@(currentView == LayoutView.List ? Variant.Filled : Variant.Outlined)"
                              Color="@(currentView == LayoutView.List ? Color.Primary : Color.Inherit)"
                              StartIcon="@Icons.Material.Filled.ViewList"
                              Size="Size.Small"
                              Class="@($"view-button {(currentView == LayoutView.List ? "view-active" : "view-inactive")}")"
                              Style="@(currentView == LayoutView.List ? "border: 2px solid var(--mud-palette-primary);" : "")">
                        List
                        @if (currentView == LayoutView.List)
                        {
                            <MudBadge Color="Color.Primary" Size="Size.Small" Class="ml-1">
                                <MudIcon Icon="@Icons.Material.Filled.Check" Size="Size.Small" />
                            </MudBadge>
                        }
                    </MudButton>
                </MudButtonGroup>
            </div>
            
            <!-- Create New Notebook Button aligned with view buttons -->
            <div class="create-group">
                <MudText Typo="Typo.subtitle2" Color="Color.Default" Class="mb-1 create-label" Style="visibility: hidden;">
                    ACTION
                </MudText>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Default" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="CreateNewNotebook"
                           Size="Size.Small"
                           Class="create-button">
                    Create new notebook
                </MudButton>
            </div>

            <!-- Clear Filters Button aligned with view buttons -->
            <div class="clear-group">
                <MudText Typo="Typo.subtitle2" Color="Color.Default" Class="mb-1 clear-label" Style="visibility: hidden;">
                    CLEAR
                </MudText>
                <MudTooltip Text="Clear all filter preferences">
                    <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                                 Color="Color.Inherit" 
                                 Size="Size.Small"
                                 OnClick="ClearAllFilters"
                                 Class="clear-button" />
                </MudTooltip>
            </div>
        </div>
    </div>

    <!-- Active Filter Indicator (for debugging only) -->
    <MudPaper Class="pa-3 mb-4 active-filter-indicator" Elevation="1" hidden>
        <div class="d-flex align-center justify-space-between">
            <div class="d-flex align-center gap-3">
                <MudChip T="string" 
                         Variant="Variant.Filled" 
                         Color="Color.Tertiary"
                         Size="Size.Small"
                         Icon="@GetFilterIcon(currentFilter)"
                         Text="@GetFilterText(currentFilter)" />
                
                <MudChip T="string" 
                         Variant="Variant.Filled" 
                         Color="Color.Tertiary"
                         Size="Size.Small"
                         Icon="@GetViewIcon(currentView)"
                         Text="@($"{currentView} View")" />
                
                @if (showAllFeatured && currentFilter == NotebookFilter.All)
                {
                    <MudChip T="string" 
                             Variant="Variant.Filled" 
                             Color="Color.Tertiary"
                             Size="Size.Small"
                             Icon="@Icons.Material.Filled.ExpandLess"
                             Text="All Featured" />
                }
                
                @if (showAllRecent && currentFilter == NotebookFilter.All)
                {
                    <MudChip T="string" 
                             Variant="Variant.Filled" 
                             Color="Color.Tertiary"
                             Size="Size.Small"
                             Icon="@Icons.Material.Filled.ExpandLess"
                             Text="All Recent" />
                }
            </div>
            
            <div class="d-flex align-center gap-2">
                <MudText Typo="Typo.body2" Color="Color.Tertiary">
                    Showing @GetTotalDisplayedCount() notebooks
                </MudText>
                <MudTooltip Text="Reload filter states from storage">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" 
                                 Size="Size.Small" 
                                 Color="Color.Inherit"
                                 OnClick="RefreshFilters" />
                </MudTooltip>
            </div>
        </div>
    </MudPaper>

    <!-- All Notebooks View -->
    @if (currentFilter == NotebookFilter.All)
    {
        <!-- Featured Notebooks Section -->
        <div class="mb-12">
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h5" Color="Color.Primary">
                    Featured notebooks
                </MudText>
                
                @if (featuredNotebooks.Count > 5 && !showAllFeatured)
                {
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary"
                              OnClick="ShowAllFeatured"
                              EndIcon="@Icons.Material.Filled.ExpandMore"
                              Size="Size.Small">
                        See All (@featuredNotebooks.Count)
                    </MudButton>
                }
                else if (featuredNotebooks.Count > 5 && showAllFeatured)
                {
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                              OnClick="ShowLessFeatured"
                              EndIcon="@Icons.Material.Filled.ExpandLess"
                              Size="Size.Small">
                        Show Less
                    </MudButton>
                }
            </div>

            @if (currentView == LayoutView.Card)
            {
                <!-- Card View -->
                <MudGrid Spacing="3">
                    @foreach (var notebook in displayedFeaturedNotebooks)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Class="h-100">
                                <MudCardContent Class="clickable-content" @onclick="@(() => OpenNotebook(notebook.Id))">
                                    <div class="d-flex justify-space-between align-start mb-2">
                                        <MudText Typo="Typo.h6" Class="mb-1 flex-grow-1">@notebook.Title</MudText>
                                        <MudIconButton Icon="Icons.Material.Filled.MoreVert" 
                                                     Size="Size.Small" 
                                                     Color="Color.Inherit" 
                                                     OnClick="@(() => HandleMenuClick(notebook))"
                                                     OnClick:stopPropagation="true" />
                                    </div>
                                    <MudText Typo="Typo.body2" Color="Color.Default" Class="mb-2">
                                        @notebook.Description
                                    </MudText>
                                    <div class="d-flex align-center justify-space-between mt-3">
                                        <MudText Typo="Typo.caption" Color="Color.Default">
                                            @notebook.Date
                                        </MudText>
                                        <MudChip T="string" Variant="Variant.Filled" 
                                                Color="Color.Tertiary" 
                                                Size="Size.Small"
                                                Text="@($"{notebook.SourceCount} sources")" />
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <!-- List View -->
                <MudCard>
                    <MudList T="string">
                        @foreach (var notebook in displayedFeaturedNotebooks)
                        {
                            <MudListItem T="string"
                                        Value="@notebook.Id"
                                         @onclick="@(() => OpenNotebook(notebook.Id))"
                                        Icon="@Icons.Material.Filled.Note">
                                <MudText Typo="Typo.h6">@notebook.Title</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Default">@notebook.Description</MudText>
                                <div class="d-flex align-center justify-space-between mt-1">
                                    <MudText Typo="Typo.caption" Color="Color.Default">@notebook.Date</MudText>
                                    <MudChip T="string" Variant="Variant.Filled" 
                                            Color="Color.Tertiary" 
                                            Size="Size.Small"
                                            Text="@($"{notebook.SourceCount} sources")" />
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                </MudCard>
            }
        </div>

        <!-- Recent Notebooks Section -->
        <div>
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h5" Color="Color.Primary">
                    Recent notebooks
                </MudText>
                
                @if (recentNotebooks.Count > 5 && !showAllRecent)
                {
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary" 
                              OnClick="ShowAllRecent"
                              EndIcon="@Icons.Material.Filled.ExpandMore"
                              Size="Size.Small">
                        See All (@recentNotebooks.Count)
                    </MudButton>
                }
                else if (recentNotebooks.Count > 5 && showAllRecent)
                {
                    <MudButton Variant="Variant.Text" 
                              Color="Color.Primary" 
                              OnClick="ShowLessRecent"
                              EndIcon="@Icons.Material.Filled.ExpandLess"
                              Size="Size.Small">
                        Show Less
                    </MudButton>
                }
            </div>

            <MudCard>
                <MudList T="string">
                    @foreach (var notebook in displayedRecentNotebooks)
                    {
                        <MudListItem T="string"
                                    Value="@notebook.Id"
                                     @onclick="@(() => OpenNotebook(notebook.Id))"
                                    Icon="@Icons.Material.Filled.Note"
                                    Text="@notebook.Title"
                                    SecondaryText="@($"{notebook.Date} - {notebook.SourceCount} sources")" />
                    }
                </MudList>
            </MudCard>
        </div>
    }
    else
    {
        <!-- Featured Only View -->
        <div>
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h5" Color="Color.Primary">
                    Featured notebooks (@featuredNotebooks.Count)
                </MudText>
                
                @if (featuredNotebooks.Count > 5 && !showAllFeatured)
                {
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                              OnClick="ShowAllFeatured"
                              EndIcon="@Icons.Material.Filled.ExpandMore"
                              Size="Size.Small">
                        See All (@featuredNotebooks.Count)
                    </MudButton>
                }
                else if (featuredNotebooks.Count > 5 && showAllFeatured)
                {
                    <MudButton Variant="Variant.Text"
                               Color="Color.Primary"
                              OnClick="ShowLessFeatured"
                              EndIcon="@Icons.Material.Filled.ExpandLess"
                              Size="Size.Small">
                        Show Less
                    </MudButton>
                }
            </div>

            @if (currentView == LayoutView.Card)
            {
                <!-- Card View -->
                <MudGrid Spacing="3">
                    @foreach (var notebook in displayedFeaturedNotebooks)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <MudCard Class="h-100">
                                <MudCardContent Class="clickable-content" @onclick="@(() => OpenNotebook(notebook.Id))">
                                    <div class="d-flex justify-space-between align-start mb-2">
                                        <MudText Typo="Typo.h6" Class="mb-1 flex-grow-1">@notebook.Title</MudText>
                                        <MudIconButton Icon="Icons.Material.Filled.MoreVert" 
                                                     Size="Size.Small" 
                                                     Color="Color.Inherit" 
                                                     OnClick="@(() => HandleMenuClick(notebook))"
                                                     OnClick:stopPropagation="true" />
                                    </div>
                                    <MudText Typo="Typo.body2" Color="Color.Default" Class="mb-2">
                                        @notebook.Description
                                    </MudText>
                                    <div class="d-flex align-center justify-space-between mt-3">
                                        <MudText Typo="Typo.caption" Color="Color.Default">
                                            @notebook.Date
                                        </MudText>
                                        <MudChip T="string" Variant="Variant.Filled" 
                                                Color="Color.Tertiary" 
                                                Size="Size.Small"
                                                Text="@($"{notebook.SourceCount} sources")" />
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <!-- List View -->
                <MudCard>
                    <MudList T="string">
                        @foreach (var notebook in displayedFeaturedNotebooks)
                        {
                            <MudListItem T="string"
                                        Value="@notebook.Id"
                                         @onclick="@(() => OpenNotebook(notebook.Id))"
                                        Icon="@Icons.Material.Filled.Note">
                                <MudText Typo="Typo.h6">@notebook.Title</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Default">@notebook.Description</MudText>
                                <div class="d-flex align-center justify-space-between mt-1">
                                    <MudText Typo="Typo.caption" Color="Color.Default">@notebook.Date</MudText>
                                    <MudChip T="string" Variant="Variant.Filled" 
                                            Color="Color.Tertiary" 
                                            Size="Size.Small"
                                            Text="@($"{notebook.SourceCount} sources")" />
                                </div>
                            </MudListItem>
                        }
                    </MudList>
                </MudCard>
            }
        </div>
    }
</MudContainer>

@code {
    private List<Notebook> featuredNotebooks = new();
    private List<Notebook> recentNotebooks = new();
    private List<Notebook> displayedFeaturedNotebooks = new();
    private List<Notebook> displayedRecentNotebooks = new();
    private LayoutView currentView = LayoutView.Card;
    private NotebookFilter currentFilter = NotebookFilter.All;
    private bool showAllFeatured = false;
    private bool showAllRecent = false;
    private bool _isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        // Set page title
        LayoutService.SetTitle("ApexLM");

        await LoadAllFilterStates();
        LoadSampleData();
        UpdateDisplayedNotebooks();
        _isInitialized = true;
    }

    protected override void OnParametersSet()
    {
        // Ensure title is set when parameters change
        LayoutService.SetTitle("ApexLM");
    }

    private async Task LoadAllFilterStates()
    {
        try
        {
            // Load all filter states using the service
            currentFilter = await FilterStorage.LoadFilterState("notebookFilter", NotebookFilter.All);
            currentView = await FilterStorage.LoadFilterState("notebookView", LayoutView.Card);
            showAllFeatured = await FilterStorage.LoadFilterState("showAllFeatured", false);
            showAllRecent = await FilterStorage.LoadFilterState("showAllRecent", false);

            Console.WriteLine($"Loaded filters - Filter: {currentFilter}, View: {currentView}, ShowAllFeatured: {showAllFeatured}, ShowAllRecent: {showAllRecent}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading filter states: {ex.Message}");
        }
    }

    private async Task ChangeFilter(NotebookFilter filter)
    {
        currentFilter = filter;
        await FilterStorage.SaveFilterState("notebookFilter", filter);

        // Reset expansion states when switching filters
        if (filter == NotebookFilter.All)
        {
            showAllFeatured = false;
            showAllRecent = false;
            await FilterStorage.SaveFilterState("showAllFeatured", false);
            await FilterStorage.SaveFilterState("showAllRecent", false);
        }
        else
        {
            showAllFeatured = false;
            await FilterStorage.SaveFilterState("showAllFeatured", false);
        }

        UpdateDisplayedNotebooks();
        StateHasChanged();
    }

    private async Task ChangeView(LayoutView newView)
    {
        currentView = newView;
        await FilterStorage.SaveFilterState("notebookView", newView);
        StateHasChanged();
    }

    private async Task ShowAllFeatured()
    {
        showAllFeatured = true;
        await FilterStorage.SaveFilterState("showAllFeatured", true);
        UpdateDisplayedNotebooks();
        StateHasChanged();
    }

    private async Task ShowLessFeatured()
    {
        showAllFeatured = false;
        await FilterStorage.SaveFilterState("showAllFeatured", false);
        UpdateDisplayedNotebooks();
        StateHasChanged();
    }

    private async Task ShowAllRecent()
    {
        showAllRecent = true;
        await FilterStorage.SaveFilterState("showAllRecent", true);
        UpdateDisplayedNotebooks();
        StateHasChanged();
    }

    private async Task ShowLessRecent()
    {
        showAllRecent = false;
        await FilterStorage.SaveFilterState("showAllRecent", false);
        UpdateDisplayedNotebooks();
        StateHasChanged();
    }

    private async Task ClearAllFilters()
    {
        await FilterStorage.ClearAllFilterStates();

        // Reset to defaults
        currentFilter = NotebookFilter.All;
        currentView = LayoutView.Card;
        showAllFeatured = false;
        showAllRecent = false;

        UpdateDisplayedNotebooks();
        StateHasChanged();

        Console.WriteLine("All filters cleared and reset to defaults");
    }

    private async Task RefreshFilters()
    {
        await LoadAllFilterStates();
        UpdateDisplayedNotebooks();
        StateHasChanged();
    }

    // Helper methods for visual indicators
    private string GetFilterIcon(NotebookFilter filter)
    {
        return filter switch
        {
            NotebookFilter.All => Icons.Material.Filled.FilterList,
            NotebookFilter.Featured => Icons.Material.Filled.Star,
            _ => Icons.Material.Filled.FilterList
        };
    }

    private string GetFilterText(NotebookFilter filter)
    {
        return filter switch
        {
            NotebookFilter.All => "All Notebooks",
            NotebookFilter.Featured => "Featured Only",
            _ => "All Notebooks"
        };
    }

    private string GetViewIcon(LayoutView view)
    {
        return view switch
        {
            LayoutView.Card => Icons.Material.Filled.ViewModule,
            LayoutView.List => Icons.Material.Filled.ViewList,
            _ => Icons.Material.Filled.ViewModule
        };
    }

    private int GetTotalDisplayedCount()
    {
        return currentFilter switch
        {
            NotebookFilter.All => displayedFeaturedNotebooks.Count + displayedRecentNotebooks.Count,
            NotebookFilter.Featured => displayedFeaturedNotebooks.Count,
            _ => displayedFeaturedNotebooks.Count + displayedRecentNotebooks.Count
        };
    }

    private void LoadSampleData()
    {
        // Featured notebooks
        featuredNotebooks = new List<Notebook>
        {
            new Notebook { Id = "1", Title = "The Two Sequences", Description = "Parenting Advice for the Digital Age", Date = "May 4, 2025", SourceCount = 21 },
            new Notebook { Id = "2", Title = "On World in Duff", Description = "Trends in Health, Wealth and...", Date = "Apr 15, 2025", SourceCount = 24 },
            new Notebook { Id = "3", Title = "The Encrowded", Description = "The World Ahead 2025", Date = "Jul 7, 2025", SourceCount = 10 },
            new Notebook { Id = "4", Title = "The Atlantic", Description = "How To Build A Life, from The Atlantic", Date = "Apr 22, 2025", SourceCount = 44 },
            new Notebook { Id = "5", Title = "New notebook", Description = "Antl and Culture\nWilliam Shakespeare: The...", Date = "Apr 25, 2025", SourceCount = 45 },
            new Notebook { Id = "8", Title = "Science & Technology", Description = "Latest advancements in AI and ML", Date = "Jun 10, 2025", SourceCount = 18 },
            new Notebook { Id = "9", Title = "Business Insights", Description = "Market trends and analysis", Date = "May 28, 2025", SourceCount = 32 }
        };

        // Recent notebooks
        recentNotebooks = new List<Notebook>
        {
            new Notebook { Id = "6", Title = "Untitled notebook", Description = "", Date = "Oct 14, 2025", SourceCount = 0 },
            new Notebook { Id = "7", Title = "Azure AI Text Analytics for...", Description = "", Date = "Oct 15, 2025", SourceCount = 3 },
            new Notebook { Id = "10", Title = "Project Alpha", Description = "New project documentation", Date = "Oct 16, 2025", SourceCount = 5 },
            new Notebook { Id = "11", Title = "Research Notes", Description = "Important research findings", Date = "Oct 17, 2025", SourceCount = 8 },
            new Notebook { Id = "12", Title = "Meeting Minutes", Description = "Weekly team meetings", Date = "Oct 18, 2025", SourceCount = 12 },
            new Notebook { Id = "13", Title = "Learning Resources", Description = "Educational materials collection", Date = "Oct 19, 2025", SourceCount = 15 }
        };
    }

    private void UpdateDisplayedNotebooks()
    {
        displayedFeaturedNotebooks = showAllFeatured 
            ? featuredNotebooks 
            : featuredNotebooks.Take(5).ToList();

        displayedRecentNotebooks = showAllRecent 
            ? recentNotebooks 
            : recentNotebooks.Take(5).ToList();
    }

    private void OpenNotebook(string notebookId)
    {
        Console.WriteLine($"Opening notebook: {notebookId}");
        Navigation.NavigateTo($"/notebookdetail/{notebookId}");
    }

    private async Task CreateNewNotebook()
    {
        //-- get the last id of recentNoteBooks
        var lastRecord = recentNotebooks.LastOrDefault();
        int lastRecordId = 0;
        if (lastRecord != null)
        {
            int.TryParse(lastRecord.Id, out lastRecordId);
        }

        recentNotebooks.Add(new()
        {
            Id = (lastRecordId + 1).ToString(), Title = "New Notebook", Description = "New Notebook", Date = DateTime.Now.ToShortDateString(), SourceCount = 0
        });

        // Using the extension method - much cleaner!
        var success = await DialogService.ShowAddSourcesDialog();

        if (success)
        {
            Console.WriteLine("Sources added successfully!");
            // Refresh your data or update UI
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("User cancelled the operation");
        }

        Console.WriteLine("New notebook created...");
        //Navigation.NavigateTo($"/notebookdetail/new");
    }

    private void HandleMenuClick(Notebook notebook)
    {
        Console.WriteLine($"Menu clicked for: {notebook.Title}");

    }

    public class Notebook
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Date { get; set; } = string.Empty;
        public int SourceCount { get; set; }
    }

    private enum LayoutView
    {
        Card,
        List
    }

    private enum NotebookFilter
    {
        All,
        Featured
    }
}

<style>
    .filter-group, .view-group, .create-group, .clear-group {
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .filter-label, .view-label, .create-label, .clear-label {
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        height: 20px;
        display: flex;
        align-items: flex-end;
    }

    /* Enhanced View Button Styling */
    .view-buttons {
        display: flex;
        height: 40px;
        position: relative;
    }

    .view-active {
        font-weight: 700;
        background-color: var(--mud-palette-primary) !important;
        color: var(--mud-palette-primary-text) !important;
        transform: scale(1.05);
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        z-index: 2;
        position: relative;
    }

    .view-inactive {
        background-color: var(--mud-palette-background);
        color: var(--mud-palette-text-primary);
        transition: all 0.3s ease;
    }

    .view-active .mud-icon {
        color: var(--mud-palette-primary-text) !important;
    }

    .view-inactive:hover {
        background-color: var(--mud-palette-action-hover);
        transform: translateY(-1px);
    }

    /* Check badge styling */
    .view-active .mud-badge {
        background-color: var(--mud-palette-primary-text) !important;
    }

        .view-active .mud-badge .mud-icon {
            color: var(--mud-palette-primary) !important;
            font-size: 0.75rem;
        }

    /* Filter button styling */
    .filter-buttons {
        display: flex;
        height: 40px;
    }

    .filter-active {
        font-weight: 700;
        background-color: var(--mud-palette-primary) !important;
        color: var(--mud-palette-primary-text) !important;
        transform: scale(1.05);
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .filter-button:hover, .view-button:hover, .create-button:hover {
        transform: translateY(-1px);
        transition: all 0.2s ease-in-out;
    }

    .create-button, .clear-button {
        height: 40px;
    }

    .active-filter-indicator {
        background-color: var(--mud-palette-background);
        border-left: 4px solid var(--mud-palette-primary);
        animation: slideIn 0.3s ease-out;
    }

    .clickable-content {
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        height: 100%;
    }

        .clickable-content:hover {
            background-color: var(--mud-palette-action-hover);
        }

    .mud-card {
        border-radius: 8px;
    }

    .mud-list-item {
        cursor: pointer;
    }

        .mud-list-item:hover {
            background-color: var(--mud-palette-action-hover);
        }

    .gap-2 {
        gap: 8px;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(var(--mud-palette-primary-rgb), 0.7);
        }

        70% {
            box-shadow: 0 0 0 6px rgba(var(--mud-palette-primary-rgb), 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(var(--mud-palette-primary-rgb), 0);
        }
    }

    /* Improved responsive design */
    @@media (max-width: 1200px) {
        .d-flex.justify-space-between {
            flex-direction: column;
            align-items: flex-start;
            gap: 24px;
        }

        .filter-group, .view-group, .create-group, .clear-group {
            width: 100%;
        }

        .filter-buttons, .view-buttons {
            width: 100%;
            justify-content: flex-start;
        }

        .filter-button, .view-button {
            flex: 1;
            max-width: 150px;
        }

        .create-group, .clear-group {
            align-items: flex-start;
        }

        .create-button {
            width: auto;
        }
    }

    @@media (max-width: 768px) {
        .filter-group, .view-group, .create-group, .clear-group {
            align-items: stretch;
        }

        .filter-buttons, .view-buttons {
            flex-direction: column;
            height: auto;
        }

        .filter-button, .view-button {
            max-width: none;
        }

        .create-button {
            width: 100%;
        }

        .d-flex.align-center.gap-2 {
            width: 100%;
            gap: 16px;
        }
    }

    /* Ensure consistent spacing */
    .mud-button-group .mud-button {
        margin: 0;
    }

    .mud-button {
        border-radius: 0;
    }

    .mud-button-group .mud-button:first-child {
        border-top-left-radius: 4px;
        border-bottom-left-radius: 4px;
    }

    .mud-button-group .mud-button:last-child {
        border-top-right-radius: 4px;
        border-bottom-right-radius: 4px;
    }
</style>