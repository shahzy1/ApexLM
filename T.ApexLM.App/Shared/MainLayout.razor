@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using T.ApexLM.App.Services
@inherits LayoutComponentBase

@inject ILayoutService LayoutService
@inject IJSRuntime JS

@implements IDisposable

<MudThemeProvider Theme="@_currentTheme" IsDarkMode="@_isDarkMode" />

<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <!-- AppBar with consistent color -->
    <MudAppBar Elevation="0" Color="Color.Transparent" Class="theme-line">
        <MudLink Href="/">
            <MudImage Src="/assets/logo_FM.png"
                      Alt="Tanolis logo"
                      Width="50"
                      Height="30"
                      Elevation="25"
                      Class="rounded-lg" />
        </MudLink>

        <MudText Typo="Typo.h5" Class="ml-1" Color="Color.Inherit">@PageTitle</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(_isDarkMode? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="ToggleTheme"
                       Title="Toggle Light/Dark Mode" />

        <LoginDisplay />

        <MudIconButton Icon="@Icons.Material.Filled.MoreVert"
                       Color="Color.Inherit"
                       Edge="Edge.End" />
    </MudAppBar>

    <!-- Themed content area -->
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private string PageTitle { get; set; } = "T.ApexLM.App";
    private bool _isDarkMode = false;
    private bool _isInitialized = false;
    private int _activeTab = 0;

    private MudTheme _currentTheme = new()
    {
        PaletteLight = new PaletteLight()
        {
            Primary = "#4B6BFB",
            Secondary = "#F0F4FF",
            Background = "#F9FAFB",
            AppbarBackground = "#FFFFFF",
            DrawerBackground = "#FFFFFF",
            Surface = "#FFFFFF",
            TextPrimary = "#1A1A1A",
            ActionDefault = "#5f5f5f"
        },
        PaletteDark = new PaletteDark()
        {
            Primary = "#90CAF9",
            Secondary = "#424242",
            Background = "#121212",
            AppbarBackground = "#1E1E1E",
            DrawerBackground = "#1E1E1E",
            Surface = "#1E1E1E",
            TextPrimary = "#FFFFFF",
            TextSecondary = "rgba(255,255,255,0.7)",
            ActionDefault = "#757575",
            Divider = "rgba(255,255,255,0.12)",
            DividerLight = "rgba(255,255,255,0.06)"
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "6px"
        }
    };

    protected override void OnInitialized()
    {
        LayoutService.SetDefaultTitle();
        LayoutService.OnTitleChanged += HandleTitleChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _isInitialized = true;

            var storedTab = await JS.InvokeAsync<string>("tabStorage.get", "activeNotebookTab");
            if (int.TryParse(storedTab, out var index))
                _activeTab = index;

            var storedTheme = await JS.InvokeAsync<string>("themeStorage.get");
            _isDarkMode = storedTheme == "dark";
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTheme();
        _isInitialized = true;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        // Also set title when parameters change (like when navigating back)
        LayoutService.SetDefaultTitle();
    }

    private async Task LoadTheme()
    {
        try
        {
            var storedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "apexlm-theme");
            _isDarkMode = storedTheme == "dark";
            Console.WriteLine($"Theme loaded - Dark mode: {_isDarkMode}, Stored: {storedTheme}");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading theme: {ex.Message}");
        }
    }

    private async Task ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        var theme = _isDarkMode ? "dark" : "light";

        try
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "apexlm-theme", theme);
            await Task.Delay(100);
            Console.WriteLine($"Theme saved: {theme}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving theme: {ex.Message}");
        }

        StateHasChanged();
    }

    private void HandleTitleChanged(string newTitle)
    {
        PageTitle = newTitle;
        StateHasChanged();
    }

    public void Dispose()
    {
        LayoutService.OnTitleChanged -= HandleTitleChanged;
    }
}

<style>
    /* AppBar stays consistent regardless of content theme */
    .theme-line {
        border-bottom: 1px solid var(--mud-palette-text-primary) !important;
        background-color: transparent !important;
    }
</style>